---
import meMyself from "../../public/img/annapm.webp";
const siteKey = import.meta.env.PUBLIC_RECAPTCHA_KEY;
---
<section class="form__container">
  <img class="img-form" src={ meMyself.src } alt="ghibli studios me" />
  <form data-contact-form class="form" data-sitekey={siteKey}>
    <div class="form-group">
      <label for="name">Name:</label>
      <input type="text" id="name" name="name" required />
    </div>
    <div class="form-group">
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required />
    </div>
    <div class="form-group">
      <label for="message">Message:</label>
      <textarea id="message" name="message" required></textarea>
    </div>
    <button type="submit">Submit</button>
    <div data-form-status></div>
  </form>
</section>

<script type="module">
  import setupContactForm from '../scripts/contact-form.js';
  setupContactForm();
</script>

<script type="module">
  const form = document.querySelector('[data-contact-form]');
  const statusDiv = document.querySelector('[data-form-status]');
  const formSiteKey = form.getAttribute('data-sitekey');

  const script = document.createElement('script');
  script.src = `https://www.google.com/recaptcha/api.js?render=${formSiteKey}`;
  script.async = true;
  document.head.appendChild(script);

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    statusDiv.textContent = 'Sending...';

    const waitForGrecaptcha = () =>
      new Promise((resolve) => {
        if (window.grecaptcha) return resolve();
        const interval = setInterval(() => {
          if (window.grecaptcha) {
            clearInterval(interval);
            resolve();
          }
        }, 100);
      });

    await waitForGrecaptcha();

    window.grecaptcha.ready(async () => {
      const token = await window.grecaptcha.execute(formSiteKey, { action: 'contact' });

      const formData = {
        name: form.name.value,
        email: form.email.value,
        message: form.message.value,
        recaptcha: token
      };

      const res = await fetch('/api/contact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      if (res.ok) {
        statusDiv.textContent = 'Message sent successfully!';
        form.reset();
      } else {
        statusDiv.textContent = 'Error sending message. Please try again later.';
      }
    });
  });
</script>

<style>
  .form__container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .form {
    background: #fff;
    color: #111111;
    padding: 2rem 4rem;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    transition: background 0.2s, color 0.2s;
    max-width: 600px;
    width: 80%;
    min-width: 300px;
    align-items: center;
  }

  @media (min-width: 768px) {
    .form__container {
      display: grid;
      grid-template-columns: 1fr 1fr;
      align-items: self-start;
    }

    .img-form {
      padding-top: 2rem;
      max-height: 380px;
      margin: 0 auto;
    }
  }

  .img-form {
    aspect-ratio: 1 / 1;
    object-fit: cover;
    border-radius: 50% 0;
    max-width: 100%;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.3rem;
    width: 100%;
  }

  label {
    font-size: 10px;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: bold;
  }

  input,
  textarea {
    padding: 0.8rem 1rem;
    border: 2px solid #111111;
    border-radius: 4px 0 4px 0;
    background: #f9f9f9;
    color: #111111;
    font-size: 1rem;
    transition: border 0.2s, background 0.2s;
    outline: none;
    resize: vertical;
    font-family: monospace;
  }

  input:focus,
  textarea:focus {
    border-color: #111111;
    background: #fff;
  }

  button[type="submit"] {
    align-self: flex-end;
    background: #111111;
    color: #fff;
    border: none;
    border-radius: 4px 0 4px 0;
    padding: 0.8rem 2.2rem;
    font-size: .8rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: background 0.2s, color 0.2s;
    font-family: inherit;
  }

  button[type="submit"]:hover {
    background: #333;
    color: #fff;
  }

  div[data-form-status] {
    text-align: right;
    width: 100%;
  }

  @media (max-width: 768px) {
    .form {
      padding: 2rem 0;
    }
  }
</style>